#!/bin/sh

# Choose language: en for English, ru for Russian
# –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: en –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, ru –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
echo "Choose language (en/ru):"
read -r LANG

if [ "$LANG" = "ru" ]; then
    SUCCESS_MSG="‚úÖ –£—Å–ø–µ—à–Ω–æ"
    ERROR_MSG="‚ùå –û—à–∏–±–∫–∞"
    WARNING_MSG="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
    INFO_MSG="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    AVERAGE_MSG="üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è"
    BEST_SERVER_MSG="üèÜ –õ—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä:"
else
    SUCCESS_MSG="‚úÖ Success"
    ERROR_MSG="‚ùå Error"
    WARNING_MSG="‚ö†Ô∏è Warning"
    INFO_MSG="‚ÑπÔ∏è Info"
    AVERAGE_MSG="üìà Average response time for"
    BEST_SERVER_MSG="üèÜ Best server:"
fi

# Enable debug mode (can be disabled by removing or commenting out the next line)
# –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å, —É–¥–∞–ª–∏–≤ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É)
#set -x

# Define color variables
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
RED='\033[0;31m'      # Red / –ö—Ä–∞—Å–Ω—ã–π
GREEN='\033[0;32m'    # Green / –ó–µ–ª—ë–Ω—ã–π
YELLOW='\033[0;33m'   # Yellow / –ñ—ë–ª—Ç—ã–π
BLUE='\033[38;5;208m' # Orange / –û—Ä–∞–Ω–∂
NC='\033[0m'          # No Color / –ë–µ–∑ –¶–≤–µ—Ç–∞

# Files and paths
# –§–∞–π–ª—ã –∏ –ø—É—Ç–∏
SERVER_LIST="/etc/init.d/servers.txt"
CONFIG_FILE="/etc/sing-box/config.json"
SERVER_PARAMS_FILE="/etc/init.d/servers_config.json"
LOG_FILE="/tmp/ping_log.txt"

# Functions for colored output
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
info() {
    echo -e "${BLUE}$1${NC}" | tee -a "$LOG_FILE"
}

success() {
    echo -e "${GREEN}$1${NC}" | tee -a "$LOG_FILE"
}

warning() {
    echo -e "${YELLOW}$1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}$1${NC}" | tee -a "$LOG_FILE"
}

start() {
    info "$INFO_MSG Checking server availability..."
    info "$INFO_MSG –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤..."

    # Check if necessary files exist
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [ ! -f "$SERVER_LIST" ]; then
        error "$ERROR_MSG Server list file $SERVER_LIST not found."
        error "$ERROR_MSG –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤ $SERVER_LIST –Ω–µ –Ω–∞–π–¥–µ–Ω."
        exit 1
    fi

    if [ ! -f "$SERVER_PARAMS_FILE" ]; then
        error "$ERROR_MSG Server parameters file $SERVER_PARAMS_FILE not found."
        error "$ERROR_MSG –§–∞–π–ª —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ $SERVER_PARAMS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω."
        exit 1
    fi

    best_server=""
    best_average=9999 # Initial high value for comparison / –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

    # Initialize total time and success count variables for each server
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—á—ë—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
    while read -r server; do
        info "üì° Pinging server: $server..."
        info "üì° –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä: $server..."
        total_time=0
        success_count=0

        for i in $(seq 1 10); do
            # Perform ping and extract the response time line
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∏–Ω–≥ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
            ping_output=$(ping -c 1 -W 1 "$server" | grep 'time=')
            if [ -n "$ping_output" ]; then
                # Extract the response time value
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
                time=$(echo "$ping_output" | awk -F'time=' '{print $2}' | awk '{print $1}')

                # Check if response time is a number
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                if echo "$time" | grep -E '^[0-9.]+$' >/dev/null 2>&1; then
                    # Add time to the total sum
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ–±—â–µ–π —Å—É–º–º–µ
                    total_time=$(awk "BEGIN {printf \"%.2f\", $total_time + $time}")
                    success_count=$((success_count + 1))
                    success "$SUCCESS_MSG Attempt $i: $time ms"
                    success "$SUCCESS_MSG –ü–æ–ø—ã—Ç–∫–∞ $i: $time –º—Å"
                else
                    warning "$WARNING_MSG Attempt $i: Invalid response time."
                    warning "$WARNING_MSG –ü–æ–ø—ã—Ç–∫–∞ $i: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞."
                fi
            else
                warning "$WARNING_MSG Attempt $i: Ping failed."

                warning "$WARNING_MSG –ü–æ–ø—ã—Ç–∫–∞ $i: –ü–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è."
            fi
        done

        if [ "$success_count" -gt 0 ]; then
            # Debug information
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            info "üìä total_time: $total_time"
            info "üî¢ success_count: $success_count"

            # Calculate average response time
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            average_time=$(awk "BEGIN {printf \"%.2f\", $total_time / $success_count}")
            success "$AVERAGE_MSG $server: $average_time ms (Successful pings: $success_count)"
            success "$AVERAGE_MSG $server: $average_time –º—Å (–£—Å–ø–µ—à–Ω—ã—Ö –ø–∏–Ω–≥–æ–≤: $success_count)"

            # Compare the average time with the current best
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å —Ç–µ–∫—É—â–∏–º –ª—É—á—à–∏–º
            better=$(echo "$average_time < $best_average" | bc)
            if [ "$better" -eq 1 ]; then
                best_average=$average_time
                best_server=$server
                success "üåü New best server: $best_server with time $best_average ms"
                success "üåü –ù–æ–≤—ã–π –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä: $best_server —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º $best_average –º—Å"
            fi
        else
            warning "$WARNING_MSG Server $server is unreachable after 10 attempts."
            warning "$WARNING_MSG –°–µ—Ä–≤–µ—Ä $server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫."
        fi

    done < "$SERVER_LIST"

    if [ -n "$best_server" ]; then
        success "$BEST_SERVER_MSG $best_server with average response time $best_average ms"
        success "$BEST_SERVER_MSG $best_server —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞ $best_average –º—Å"

        # Get parameters for the best server
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        server_params=$(jq ".servers[] | select(.server == \"$best_server\")" "$SERVER_PARAMS_FILE")

        # Debug output
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        info "üìÑ Parameters of the selected server:"
        info "üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:"
        echo "$server_params" | tee -a "$LOG_FILE"

        # Check if server_params contains valid JSON
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ server_params —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON
        if ! echo "$server_params" | jq empty > /dev/null 2>&1; then
            error "$ERROR_MSG Parameters for server $best_server contain invalid JSON."
            error "$ERROR_MSG –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ $best_server —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON."
            exit 1
        fi

        if [ -z "$server_params" ]; then
            error "$ERROR_MSG Parameters for server $best_server not found."
            error "$ERROR_MSG –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ $best_server –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            exit 1
        fi
